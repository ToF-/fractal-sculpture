name: lens
version: 5.1
id: lens-5.1-CzLOqeGnwdk1F96rJmbb5P
key: lens-5.1-CzLOqeGnwdk1F96rJmbb5P
license: BSD-2-Clause
copyright: Copyright (C) 2012-2016 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
author: Edward A. Kmett
stability: provisional
homepage: http://github.com/ekmett/lens/
synopsis: Lenses, Folds and Traversals
description:
    This package comes \"Batteries Included\" with many useful lenses for the types
    commonly used from the Haskell Platform, and with tools for automatically
    generating lenses and isomorphisms for user-supplied data types.
    .
    The combinators in @Control.Lens@ provide a highly generic toolbox for composing
    families of getters, folds, isomorphisms, traversals, setters and lenses and their
    indexed variants.
    .
    An overview, with a large number of examples can be found in the <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals README>.
    .
    An introductory video on the style of code used in this library by Simon Peyton Jones is available from <http://skillsmatter.com/podcast/scala/lenses-compositional-data-access-and-manipulation Skills Matter>.
    .
    A video on how to use lenses and how they are constructed is available on <http://youtu.be/cefnmjtAolY?hd=1 youtube>.
    .
    Slides for that second talk can be obtained from <http://comonad.com/haskell/Lenses-Folds-and-Traversals-NYC.pdf comonad.com>.
    .
    More information on the care and feeding of lenses, including a brief tutorial and motivation
    for their types can be found on the <https://github.com/ekmett/lens/wiki lens wiki>.
    .
    A small game of @pong@ and other more complex examples that manage their state using lenses can be found in the <https://github.com/ekmett/lens/blob/master/examples/ example folder>.
    .
    /Lenses, Folds and Traversals/
    .
    With some signatures simplified, the core of the hierarchy of lens-like constructions looks like:
    .
    .
    <<http://i.imgur.com/ALlbPRa.png>>
    .
    <images/Hierarchy.png (Local Copy)>
    .
    You can compose any two elements of the hierarchy above using @(.)@ from the @Prelude@, and you can
    use any element of the hierarchy as any type it linked to above it.
    .
    The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
    .
    For instance:
    .
    * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
    .
    * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
    .
    /Minimizing Dependencies/
    .
    If you want to provide lenses and traversals for your own types in your own libraries, then you
    can do so without incurring a dependency on this (or any other) lens package at all.
    .
    /e.g./ for a data type:
    .
    > data Foo a = Foo Int Int a
    .
    You can define lenses such as
    .
    > -- bar :: Lens' (Foo a) Int
    > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
    > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
    .
    > -- quux :: Lens (Foo a) (Foo b) a b
    > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
    > quux f (Foo a b c) = fmap (Foo a b) (f c)
    .
    without the need to use any type that isn't already defined in the @Prelude@.
    .
    And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
    .
    > -- traverseBarAndBaz :: Traversal' (Foo a) Int
    > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
    > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
    .
    What is provided in this library is a number of stock lenses and traversals for
    common haskell types, a wide array of combinators for working them, and more
    exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses, Generics
abi: 3efaf93d8e8071b00101661838f628e3
exposed: True
exposed-modules:
    Control.Exception.Lens Control.Lens Control.Lens.At
    Control.Lens.Combinators Control.Lens.Cons Control.Lens.Each
    Control.Lens.Empty Control.Lens.Equality Control.Lens.Extras
    Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
    Control.Lens.Internal Control.Lens.Internal.Bazaar
    Control.Lens.Internal.ByteString Control.Lens.Internal.CTypes
    Control.Lens.Internal.Context Control.Lens.Internal.Deque
    Control.Lens.Internal.Exception Control.Lens.Internal.FieldTH
    Control.Lens.Internal.Fold Control.Lens.Internal.Getter
    Control.Lens.Internal.Indexed Control.Lens.Internal.Instances
    Control.Lens.Internal.Iso Control.Lens.Internal.Level
    Control.Lens.Internal.List Control.Lens.Internal.Magma
    Control.Lens.Internal.Prism Control.Lens.Internal.PrismTH
    Control.Lens.Internal.Profunctor Control.Lens.Internal.Review
    Control.Lens.Internal.Setter Control.Lens.Internal.TH
    Control.Lens.Internal.Zoom Control.Lens.Iso Control.Lens.Lens
    Control.Lens.Level Control.Lens.Operators Control.Lens.Plated
    Control.Lens.Prism Control.Lens.Profunctor Control.Lens.Reified
    Control.Lens.Review Control.Lens.Setter Control.Lens.TH
    Control.Lens.Traversal Control.Lens.Tuple Control.Lens.Type
    Control.Lens.Unsound Control.Lens.Wrapped Control.Lens.Zoom
    Control.Monad.Error.Lens Control.Parallel.Strategies.Lens
    Control.Seq.Lens Data.Array.Lens Data.Bits.Lens
    Data.ByteString.Lazy.Lens Data.ByteString.Lens
    Data.ByteString.Strict.Lens Data.Complex.Lens Data.Data.Lens
    Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
    Data.Map.Lens Data.Sequence.Lens Data.Set.Lens Data.Text.Lazy.Lens
    Data.Text.Lens Data.Text.Strict.Lens Data.Tree.Lens
    Data.Typeable.Lens Data.Vector.Generic.Lens Data.Vector.Lens
    GHC.Generics.Lens Language.Haskell.TH.Lens Numeric.Lens
    Numeric.Natural.Lens System.Exit.Lens System.FilePath.Lens
    System.IO.Error.Lens
hidden-modules: Control.Lens.Internal.Prelude
import-dirs: /Users/christophe.thibaut/Coding/fractal-sculpture/.cabal-sandbox/lib/x86_64-osx-ghc-8.6.3/lens-5.1-CzLOqeGnwdk1F96rJmbb5P
library-dirs: /Users/christophe.thibaut/Coding/fractal-sculpture/.cabal-sandbox/lib/x86_64-osx-ghc-8.6.3/lens-5.1-CzLOqeGnwdk1F96rJmbb5P
dynamic-library-dirs: /Users/christophe.thibaut/Coding/fractal-sculpture/.cabal-sandbox/lib/x86_64-osx-ghc-8.6.3
data-dir: /Users/christophe.thibaut/Coding/fractal-sculpture/.cabal-sandbox/share/x86_64-osx-ghc-8.6.3/lens-5.1
hs-libraries: HSlens-5.1-CzLOqeGnwdk1F96rJmbb5P
depends:
    array-0.5.3.0 assoc-1.0.2-7kpiVIbUrXtIN7co4tjAMW base-4.12.0.0
    base-orphans-0.8.6-5O5jqEW3stE4CAsm1Catjq
    bifunctors-5.5.11-2FJyarTGA9v1CXTLYnv24p bytestring-0.10.8.2
    call-stack-0.4.0-4B7yRh8mgB9GZzsNspyuNQ
    comonad-5.0.8-FTEwxF1OihCErHsQ7nhVpW containers-0.6.0.1
    contravariant-1.5.5-14cEzmNwGQU1jCxLPd7fD1
    distributive-0.6.2.1-32W34SverPaDYuUdhp4qaA
    exceptions-0.10.4-622ySnQapwMAU2KS1exqor filepath-1.4.2.1
    free-5.1.7-DLOr8VRvObR9tmAFGIBx4y ghc-prim-0.5.3
    hashable-1.4.0.2-45679OrlPvpJEGb1I6x7iN
    indexed-traversable-0.1.2-HKw54pX9JGP6ihXqkhnMkq
    indexed-traversable-instances-0.1.1-EdiSo556n8ZAnWHpEmC0A5
    kan-extensions-5.2.3-9T7kbVz3GAo6yUrvzQQdBv mtl-2.2.2
    parallel-3.2.2.0-EGl5SOk48TWHAD161C93aQ
    profunctors-5.6.2-9UixHbwAt8m7VOB2n1HIFJ
    reflection-2.1.6-FciHhEwk2f6O0r8BkdFMd
    semigroupoids-5.3.6-GDeNbkfI38Piklqe3gzcl
    strict-0.4.0.1-CaTFSKvN8Ii5UPXwRmc2s1
    tagged-0.8.6.1-ACTfdL0u79W7QCfjOcryc3 template-haskell-2.14.0.0
    text-1.2.3.1 th-abstraction-0.4.3.0-3NTff6cW8fLDZrzmDUZpKQ
    these-1.1.1.1-78qSSoimmrYIzAN7D7yfTC transformers-0.5.5.0
    transformers-compat-0.7.1-3qfZkuhbniGJIlgO1KqlxQ
    unordered-containers-0.2.16.0-JVIA7UjD1ZiLN8gC4Hruek
    vector-0.12.3.1-F9wx38lqV1sA5c90zDB0Yo
haddock-interfaces: /Users/christophe.thibaut/Coding/fractal-sculpture/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.6.3/lens-5.1/html/lens.haddock
haddock-html: /Users/christophe.thibaut/Coding/fractal-sculpture/.cabal-sandbox/share/doc/x86_64-osx-ghc-8.6.3/lens-5.1/html
